// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRDemo.Server.Infrastructure.Data;

#nullable disable

namespace SignalRDemo.Server.Migrations
{
    [DbContext(typeof(DeclarationsDbContext))]
    [Migration("20230429193226_Initial3")]
    partial class Initial3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "0afcad75-ddf0-4062-8b40-ce1506caeda3",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "f30cfe87-b8f8-495b-857a-acd444192d34",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c",
                            RoleId = "0afcad75-ddf0-4062-8b40-ce1506caeda3"
                        },
                        new
                        {
                            UserId = "04fb52bc-821b-43d7-9995-576d52025a28",
                            RoleId = "f30cfe87-b8f8-495b-857a-acd444192d34"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Declaration", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeclarantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JurisdictionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetMass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclarantId");

                    b.HasIndex("JurisdictionCode");

                    b.ToTable("Declarations");

                    b.HasData(
                        new
                        {
                            Id = "b5926c56-a88c-43ef-aeb8-a87478b0f525",
                            CreationDate = new DateTime(2023, 4, 26, 19, 32, 26, 442, DateTimeKind.Utc).AddTicks(851),
                            DeclarantId = "36cdea02-f282-40c4-8fca-a62e62825a5c",
                            Description = "Test GB declaration 1",
                            JurisdictionCode = "GB",
                            NetMass = 80m
                        },
                        new
                        {
                            Id = "2e6b3059-0dbd-41ed-81bd-197acee92a76",
                            CreationDate = new DateTime(2023, 4, 27, 19, 32, 26, 442, DateTimeKind.Utc).AddTicks(867),
                            DeclarantId = "36cdea02-f282-40c4-8fca-a62e62825a5c",
                            Description = "Test BE declaration 1",
                            JurisdictionCode = "BE",
                            NetMass = 60m
                        },
                        new
                        {
                            Id = "74e5ebab-e280-4932-8b76-99235e78b08d",
                            CreationDate = new DateTime(2023, 4, 28, 19, 32, 26, 442, DateTimeKind.Utc).AddTicks(874),
                            DeclarantId = "36cdea02-f282-40c4-8fca-a62e62825a5c",
                            Description = "Test DE declaration 1",
                            JurisdictionCode = "DE",
                            NetMass = 50m
                        },
                        new
                        {
                            Id = "99a24116-3fba-48e0-8256-dd08c72cfd4c",
                            CreationDate = new DateTime(2023, 4, 28, 7, 32, 26, 442, DateTimeKind.Utc).AddTicks(899),
                            DeclarantId = "04fb52bc-821b-43d7-9995-576d52025a28",
                            Description = "Test GB declaration 2",
                            JurisdictionCode = "GB",
                            NetMass = 90m
                        },
                        new
                        {
                            Id = "a5f1c866-0233-4d02-99a5-59a02a191c0f",
                            CreationDate = new DateTime(2023, 4, 29, 7, 32, 26, 442, DateTimeKind.Utc).AddTicks(905),
                            DeclarantId = "04fb52bc-821b-43d7-9995-576d52025a28",
                            Description = "Test BE declaration 2",
                            JurisdictionCode = "BE",
                            NetMass = 70m
                        },
                        new
                        {
                            Id = "8fc1a202-00eb-4e37-a970-57a7fdd8cd3f",
                            CreationDate = new DateTime(2023, 4, 29, 19, 32, 26, 442, DateTimeKind.Utc).AddTicks(913),
                            DeclarantId = "04fb52bc-821b-43d7-9995-576d52025a28",
                            Description = "Test DE declaration 2",
                            JurisdictionCode = "DE",
                            NetMass = 40m
                        });
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Jurisdiction", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("Jurisdictions");

                    b.HasData(
                        new
                        {
                            Code = "GB",
                            DisplayColor = "blue"
                        },
                        new
                        {
                            Code = "BE",
                            DisplayColor = "orange"
                        },
                        new
                        {
                            Code = "DE",
                            DisplayColor = "olive"
                        },
                        new
                        {
                            Code = "IE",
                            DisplayColor = "green"
                        },
                        new
                        {
                            Code = "NL",
                            DisplayColor = "aqua"
                        },
                        new
                        {
                            Code = "PL",
                            DisplayColor = "red"
                        });
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "36cdea02-f282-40c4-8fca-a62e62825a5c",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3a522e1c-53ee-4ad2-a170-f993bc5086d5",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEMf+wHQ49DWVzE83F9ymXNoK14VjhwsTvithOs/c2PA+V3TJ37001dC+o/ZUSpqltw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "04302775-9345-4f3f-a878-9534afc539db",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "04fb52bc-821b-43d7-9995-576d52025a28",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "3aceb061-9889-44d0-ac56-2564a574d5eb",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEAi0aNGNhaKfwc1H+fsfgL6+mndNcC62SvMzImEjIdSDav+qixOajKN7JXo1DijlsQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "afa56254-3547-4091-9a3c-a21162eb2b4d",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("UserJurisdiction", b =>
                {
                    b.Property<string>("JurisdictionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("JurisdictionCode", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJurisdiction");

                    b.HasData(
                        new
                        {
                            JurisdictionCode = "GB",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "BE",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "DE",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "IE",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "NL",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "PL",
                            UserId = "36cdea02-f282-40c4-8fca-a62e62825a5c"
                        },
                        new
                        {
                            JurisdictionCode = "GB",
                            UserId = "04fb52bc-821b-43d7-9995-576d52025a28"
                        },
                        new
                        {
                            JurisdictionCode = "BE",
                            UserId = "04fb52bc-821b-43d7-9995-576d52025a28"
                        },
                        new
                        {
                            JurisdictionCode = "DE",
                            UserId = "04fb52bc-821b-43d7-9995-576d52025a28"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Declaration", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", "Declarant")
                        .WithMany("Declarations")
                        .HasForeignKey("DeclarantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.Jurisdiction", "Jurisdiction")
                        .WithMany()
                        .HasForeignKey("JurisdictionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declarant");

                    b.Navigation("Jurisdiction");
                });

            modelBuilder.Entity("UserJurisdiction", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.Jurisdiction", null)
                        .WithMany()
                        .HasForeignKey("JurisdictionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.User", b =>
                {
                    b.Navigation("Declarations");
                });
#pragma warning restore 612, 618
        }
    }
}
