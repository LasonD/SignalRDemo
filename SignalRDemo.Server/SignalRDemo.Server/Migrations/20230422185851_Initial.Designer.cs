// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SignalRDemo.Server.Infrastructure.Data;

#nullable disable

namespace SignalRDemo.Server.Migrations
{
    [DbContext(typeof(DeclarationsDbContext))]
    [Migration("20230422185851_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.5");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8f474092-4b21-40a0-a09c-a9fcc9d3fbd4",
                            Name = "Administrator",
                            NormalizedName = "ADMINISTRATOR"
                        },
                        new
                        {
                            Id = "94f98f25-b5b4-47e5-b7cb-4141f276b472",
                            Name = "User",
                            NormalizedName = "USER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("ClaimType")
                        .HasColumnType("TEXT");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("TEXT");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46",
                            RoleId = "8f474092-4b21-40a0-a09c-a9fcc9d3fbd4"
                        },
                        new
                        {
                            UserId = "ddac18d6-c588-4987-910c-2987885871f5",
                            RoleId = "94f98f25-b5b4-47e5-b7cb-4141f276b472"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .HasColumnType("TEXT");

                    b.Property<string>("Value")
                        .HasColumnType("TEXT");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Declaration", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("DeclarantId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("JurisdictionCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<decimal>("NetMass")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DeclarantId");

                    b.HasIndex("JurisdictionCode");

                    b.ToTable("Declarations");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ecdf4745-6c8a-419f-ad47-4183e3da145b"),
                            CreationDate = new DateTime(2023, 4, 19, 18, 58, 51, 393, DateTimeKind.Utc).AddTicks(8225),
                            DeclarantId = "27241cdd-e16b-4755-bb51-fd3561273c46",
                            Description = "Test GB declaration 1",
                            JurisdictionCode = "GB",
                            NetMass = 80m
                        },
                        new
                        {
                            Id = new Guid("8b2d771b-2569-4799-998c-d5132e7521e2"),
                            CreationDate = new DateTime(2023, 4, 20, 18, 58, 51, 393, DateTimeKind.Utc).AddTicks(8237),
                            DeclarantId = "27241cdd-e16b-4755-bb51-fd3561273c46",
                            Description = "Test BE declaration 1",
                            JurisdictionCode = "BE",
                            NetMass = 60m
                        },
                        new
                        {
                            Id = new Guid("bf21cda8-74f4-4d9b-b264-8aaab33c9503"),
                            CreationDate = new DateTime(2023, 4, 21, 18, 58, 51, 393, DateTimeKind.Utc).AddTicks(8241),
                            DeclarantId = "27241cdd-e16b-4755-bb51-fd3561273c46",
                            Description = "Test DE declaration 1",
                            JurisdictionCode = "DE",
                            NetMass = 50m
                        },
                        new
                        {
                            Id = new Guid("e5991c07-649c-48f6-a218-1673fb3b0159"),
                            CreationDate = new DateTime(2023, 4, 21, 6, 58, 51, 393, DateTimeKind.Utc).AddTicks(8253),
                            DeclarantId = "ddac18d6-c588-4987-910c-2987885871f5",
                            Description = "Test GB declaration 2",
                            JurisdictionCode = "GB",
                            NetMass = 90m
                        },
                        new
                        {
                            Id = new Guid("da8b5ed7-e6e9-47c8-9072-d14e4871475a"),
                            CreationDate = new DateTime(2023, 4, 22, 6, 58, 51, 393, DateTimeKind.Utc).AddTicks(8376),
                            DeclarantId = "ddac18d6-c588-4987-910c-2987885871f5",
                            Description = "Test BE declaration 2",
                            JurisdictionCode = "BE",
                            NetMass = 70m
                        },
                        new
                        {
                            Id = new Guid("4408e0c5-ace9-4997-b2b1-5fdd8b3f2a6d"),
                            CreationDate = new DateTime(2023, 4, 22, 18, 58, 51, 393, DateTimeKind.Utc).AddTicks(8383),
                            DeclarantId = "ddac18d6-c588-4987-910c-2987885871f5",
                            Description = "Test DE declaration 2",
                            JurisdictionCode = "DE",
                            NetMass = 40m
                        });
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Jurisdiction", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("TEXT");

                    b.Property<string>("DisplayColor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Code");

                    b.ToTable("Jurisdictions");

                    b.HasData(
                        new
                        {
                            Code = "GB",
                            DisplayColor = "blue"
                        },
                        new
                        {
                            Code = "BE",
                            DisplayColor = "orange"
                        },
                        new
                        {
                            Code = "DE",
                            DisplayColor = "olive"
                        },
                        new
                        {
                            Code = "IE",
                            DisplayColor = "green"
                        },
                        new
                        {
                            Code = "NL",
                            DisplayColor = "aqua"
                        },
                        new
                        {
                            Code = "PL",
                            DisplayColor = "red"
                        });
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("TEXT");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("INTEGER");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "27241cdd-e16b-4755-bb51-fd3561273c46",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f538b547-7379-4008-9eaf-fcf4a2f8c712",
                            Email = "admin@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@LOCALHOST.COM",
                            NormalizedUserName = "ADMIN@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAED+PWgXpTB3fczGEFMc8PZ3Nn/Yh7ZcuY5Z2HYN5PL1McZJLY0P+iB5VUPOZ82zlbw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "50b1279f-aaaf-45ae-8420-291025a93021",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "ddac18d6-c588-4987-910c-2987885871f5",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "68f136c5-cd51-429a-860f-c567ba8a6390",
                            Email = "user@localhost.com",
                            EmailConfirmed = true,
                            LockoutEnabled = false,
                            NormalizedEmail = "USER@LOCALHOST.COM",
                            NormalizedUserName = "USER@LOCALHOST.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAEHloJAcjpcRBtbgok+GHRFJWn4KFrYunp8gNG3OuQhoEqh1RRINzhVIKH63VPDAzaQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2024f74e-57c8-4ee5-8695-6897e34a151e",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("UserJurisdiction", b =>
                {
                    b.Property<string>("JurisdictionCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("JurisdictionCode", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserJurisdiction");

                    b.HasData(
                        new
                        {
                            JurisdictionCode = "GB",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "BE",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "DE",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "IE",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "NL",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "PL",
                            UserId = "27241cdd-e16b-4755-bb51-fd3561273c46"
                        },
                        new
                        {
                            JurisdictionCode = "GB",
                            UserId = "ddac18d6-c588-4987-910c-2987885871f5"
                        },
                        new
                        {
                            JurisdictionCode = "BE",
                            UserId = "ddac18d6-c588-4987-910c-2987885871f5"
                        },
                        new
                        {
                            JurisdictionCode = "DE",
                            UserId = "ddac18d6-c588-4987-910c-2987885871f5"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.Declaration", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.User", "Declarant")
                        .WithMany("Declarations")
                        .HasForeignKey("DeclarantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.Jurisdiction", "Jurisdiction")
                        .WithMany()
                        .HasForeignKey("JurisdictionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Declarant");

                    b.Navigation("Jurisdiction");
                });

            modelBuilder.Entity("UserJurisdiction", b =>
                {
                    b.HasOne("SignalRDemo.Server.Application.Models.Jurisdiction", null)
                        .WithMany()
                        .HasForeignKey("JurisdictionCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SignalRDemo.Server.Application.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SignalRDemo.Server.Application.Models.User", b =>
                {
                    b.Navigation("Declarations");
                });
#pragma warning restore 612, 618
        }
    }
}
